@page "/Autores"
@inject IServiciosAutor ServiciosAutor

<!DOCTYPE html>
    <html>
    <head>
        <title>Autores</title>
        <link rel="stylesheet" href="~/css/app.css" /> 
    </head>
    <body>
        <h1 class="TituloPrincipal">Autores</h1>
        <hr />


        <BSContainer class="Container">
            <h2>Traer todos los Autores Registrados</h2>
        <BSButton Color="BlazorStrap.BSColor.Primary" IsOutlined="true" @onclick="GetAutores">Buscarlos</BSButton>
        @if (listaA != null)
        {
            <BSTable Class="tablamorada">
                <BSTHead>
                    <BSTR>
                        <BSTD>AutorID</BSTD>
                        <BSTD>Nombre</BSTD>
                        <BSTD>Nacionalidad</BSTD>
                        <BSTD>Fecha Nacimiento</BSTD>
                    </BSTR>
                </BSTHead>
                <BSTBody>
                    @foreach (Autor item in listaA)
                    {
                        <BSTR>
                            <BSTD>@item.AutorID</BSTD>
                            <BSTD>@item.NombreAutor</BSTD>
                            <BSTD>@item.Nacionalidad</BSTD>
                            <BSTD>@item.FechaNacimiento</BSTD>
                        </BSTR>
                    }
                </BSTBody>
            </BSTable>
            <BSAlert Color="BlazorStrap.BSColor.Success" HasIcon="true">Peticion Exitosa</BSAlert>

        }
        else
        {
            <BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessageGet</BSAlert>
        }
        </BSContainer>


        <hr />



    <BSContainer class="Container">
            <h2>Busqueda filtrada de Autores</h2>
            <p>
                Digite el Codigo del Autor:
            <input class="input" type="text" @bind="CodAutor" required />
            </p>
        <BSButton Color="BlazorStrap.BSColor.Primary" IsOutlined="true" @onclick="TraerAutor">Traerlo</BSButton>
          @if(autor!=null)
            {
            <BSTable Class="tablamorada">
                <BSTHead>
                    <BSTR>
                        <BSTD>AutorID</BSTD>
                        <BSTD>Nombre</BSTD>
                        <BSTD>Nacionalidad</BSTD>
                        <BSTD>Fecha Nacimiento</BSTD>
                    </BSTR>
                </BSTHead>
                <BSTBody>
                    
                        <BSTR>
                            <BSTD>@autor.AutorID</BSTD>
                            <BSTD>@autor.NombreAutor</BSTD>
                            <BSTD>@autor.Nacionalidad</BSTD>
                            <BSTD>@autor.FechaNacimiento</BSTD>
                        </BSTR>
                    
                </BSTBody>
            </BSTable>
            <BSAlert Color="BlazorStrap.BSColor.Success" HasIcon="true">Autor encontrado</BSAlert>
        }
        else
        {
            <BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessageGetID</BSAlert>
        }
        </BSContainer>

        <hr />


    <BSContainer class="Container">
            <h2>Formulario para insertar nuevos autores</h2>
            <BSButton Color="BlazorStrap.BSColor.Dark" IsOutlined="true" @onclick="Activar">Activar formulario</BSButton>

        <BSModal @ref="AuthorModal">
            <BSModalHeader>
                <h2>Insertar Autores</h2>
            </BSModalHeader>
            <BSModalContent>
                
                <div class="form-group">
                    <label for="NombreAutor">Nombre:</label>
                    <input type="text" id="NombreAutor" class="form-control" @bind="AutorPost.NombreAutor" />
                </div>
                <div class="form-group">
                    <label for="Nacionalidad">Nacionalidad:</label>
                    <input type="text" id="Nacionalidad" class="form-control" @bind="AutorPost.Nacionalidad" />
                </div>
                <div class="form-group">
                    <label for="FechaNacimiento">Fecha de Nacimiento:</label>
                    <input type="date" id="FechaNacimiento" class="form-control" @bind="AutorPost.FechaNacimiento" />
                </div>
                <BSButton Color="BlazorStrap.BSColor.Success" IsOutlined="true" @onclick="PostAutor">Insertar</BSButton>
                <BSButton Color="BlazorStrap.BSColor.Primary" IsOutlined="true" @onclick="Cerrar">Cerrar</BSButton>
                @if(SuccessPost!=false)
                {
                    <BSAlert Color="BlazorStrap.BSColor.Success" HasIcon="true">Insertado Correctamente</BSAlert>
                }
                else
                {
                    <BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessagePost</BSAlert>
                }
            </BSModalContent>
        </BSModal>
        </BSContainer>


        <hr />


    <BSContainer class="Container">
            <h2>Eliminacion de Autores</h2>
            <p>
                Digite el codigo del Autor a eliminar:
            <input class="input" type="text" @bind="coddelete" required />
            </p>
            <BSButton Color="BlazorStrap.BSColor.Primary" IsOutlined="true" @onclick="DeleteAutor">Eliminar</BSButton>
            @if(SuccessDelete!=false)
            {
                <BSAlert Color="BlazorStrap.BSColor.Success" HasIcon="true">Eliminado Correctamente</BSAlert>
            }
            else
            {
                <BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessageDelete</BSAlert>
            }
    </BSContainer>


    <hr />


    <BSContainer class="Container">
        <h2>Modificar Autores</h2>
        <p>
            Escribe el Código del Autor:
            <input class="input" type="text" @bind="CodPut" required />
        </p>
        <BSButton Color="BlazorStrap.BSColor.Primary" IsOutlined="true" @onclick="GetPutAutor">Buscarlo</BSButton>

        @if (AutorPut != null)
        {
            <BSButton Color="BlazorStrap.BSColor.Dark" IsOutlined="true" @onclick="EditarModal">Activar Edicion</BSButton>
            <BSModal @ref="ModalPut">
                <BSModalHeader>
                    <h2>Autor encontrado</h2>
                </BSModalHeader>
                <BSModalContent>
                    <div class="form-group">
                        <label for="NombreAutor">Modifique el nombre del autor:</label>
                        <input type="text" id="NombreAutor" class="form-control" @bind="AutorPut.NombreAutor" />
                    </div>
                    <div class="form-group">
                        <label for="Nacionalidad">Modifique la nacionalidad del autor:</label>
                        <input type="text" id="Nacionalidad" class="form-control" @bind="AutorPut.Nacionalidad" />
                    </div>
                    <BSButton Color="BlazorStrap.BSColor.Success" IsOutlined="true" @onclick="PutAutor">Modificar</BSButton>
                    <BSButton Color="BlazorStrap.BSColor.Danger" IsOutlined="true" @onclick="CerrarModalEdit">Cerrar</BSButton>
                    @if(SuccessPut!=false)
                    {
                        <BSAlert Color="BlazorStrap.BSColor.Success" HasIcon="true">Actualizacion Correcta</BSAlert>
                    }
                    else
                    {
                        <BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessagePut</BSAlert>
                    }
                </BSModalContent>
            </BSModal>
        }
        else
        {
            <BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessageGetPut</BSAlert>
        }
    </BSContainer>

    </body>
    </html>

@code {

    //Metodo get para poder traer todos los registros de autores
    public List<Autor>? listaA { get; set; }
    public string? MessageGet { get; set; }
    protected async Task GetAutores()
    {
        try
        {
            string url = "https://localhost:7016/api/Autors";
            var response = await ServiciosAutor.GetAutor<List<Autor>>(url);
            if(!response.Error)
            {
                listaA = response.Response;
                MessageGet = String.Empty;
            }
            else
            {
                listaA = null;
                MessageGet = await response.GetErrorMessageAsync();
            }

        }catch (Exception e)
        {
            listaA = null;
            MessageGet = e.Message;

        }
    }

    //metodo get filtrado para traer un solo registro
    public Autor? autor { get; set; }
    public string? MessageGetID {get;set;}
    public int CodAutor { get; set; }
    protected async Task TraerAutor()
    {
        try
        {
            string url = "https://localhost:7016/api/Autors/"+CodAutor;
            var response = await ServiciosAutor.GetAutor<Autor>(url);
            if(!response.Error)
            {
                autor = response.Response;
                MessageGetID = String.Empty;
            }
            else
            {
                autor = null;
                MessageGetID = await response.GetErrorMessageAsync();
            }

        }catch (Exception e)
        {
            autor = null;
            MessageGetID = e.Message;

        }
    }

    //Metodo para poder insertar un autor
    public Autor AutorPost { get; set; } = new Autor();
    public bool SuccessPost = false;
    public string MessagePost { get; set; }
    protected async Task PostAutor()
    {
        try
        {
            string url = "https://localhost:7016/api/Autors";
            var response = await ServiciosAutor.PostAutor<Autor>(url, AutorPost);
            if(!response.Error)
            {
                SuccessPost = true;
                MessagePost = String.Empty;
            }
            else
            {
                SuccessPost = false;
                MessagePost = await response.GetErrorMessageAsync();
            }

        }catch (Exception e)
        {
            SuccessPost = false;
            MessagePost = e.Message;

        }
    }

    //metodo para eliminar un autor
    public BSModal? DeleteModal { get; set; }
    public int coddelete { get; set; }
    public bool SuccessDelete =false;
    public string? MessageDelete { get; set; }
    protected async Task DeleteAutor()
    {
        try{
            string url = "https://localhost:7016/api/Autors/" + coddelete;
            var response = await ServiciosAutor.DeleteAutor(url);
            if(!response.Error)
            {
                SuccessDelete = true;
                MessageDelete = String.Empty;
            }
            else
            {
                SuccessDelete=false;
                MessageDelete = await response.GetErrorMessageAsync();
            }

        }catch (Exception e)
        {
            SuccessDelete = false;
            MessageDelete = e.Message;

        }
    }

    //Metodo para editar un autor
    public int CodPut { get; set; }
    public Autor? AutorPut { get; set; }
    public string? MessageGetPut { get; set; }
    protected async Task GetPutAutor()
    {
        try
        {
            string url = "https://localhost:7016/api/Autors/" + CodPut;
            var response = await ServiciosAutor.GetAutor<Autor>(url);
            if (!response.Error)
            {
                AutorPut = response.Response;
                MessageGetPut = String.Empty;
            }
            else
            {
                AutorPut = null;
                MessageGetPut = await response.GetErrorMessageAsync();
            }
        }catch (Exception e)
        {
            AutorPut = null;
            MessageGetPut = e.Message;
        }

    }


    public bool SuccessPut = false;
    public string? MessagePut { get; set; }
    protected async Task PutAutor()
    {
        try
        {
            string url = "https://localhost:7016/api/Autors/" + CodPut;
            var response=await ServiciosAutor.PutAutor<Autor>(url,AutorPut);
            if(!response.Error)
            {
                SuccessPut = true;
                MessagePut = String.Empty;

            }
            else
            {
                SuccessPut = false;
                MessagePut = await response.GetErrorMessageAsync();
            }

        }catch(Exception e)
        {
            SuccessPut = false;
            MessagePut = e.Message;
        }
    }

    //Metodo para activar el modal
    private BSModal? AuthorModal { get; set; }
    public void Activar()
    {
        if(AuthorModal!=null)
        {
            AuthorModal.ToggleAsync();
        }

    }

    public void Cerrar()
    {
        if (AuthorModal != null)
        {
            AuthorModal.ToggleAsync();
        }
    }


    public BSModal? ModalPut { get; set; }
    public async Task EditarModal()
    {
        if(ModalPut!=null)
        {
            await ModalPut.ShowAsync();
        }
    }

    public async Task CerrarModalEdit()
    {
        if (ModalPut != null)
        {
            await ModalPut.ToggleAsync();
        }
    }


}
