@page "/Libros"
@inject IServiciosLibro ServiciosLibro
@inject IServiciosAutor ServiciosAutor

<!DOCTYPE html>
    <html>
    <head>
        <title>Libros</title>
		<link rel="stylesheet" href="~/css/app.css" />
    </head>
    <body>
		<h1 class="TituloPrincipal">Libros</h1>
		<hr />

		<BSContainer class="Container">
			<h2>Busqueda de Libros</h2>
			@* <BSButton Color="BlazorStrap.BSColor.Dark" IsOutlined="true" @onclick="GetLibro">Traer libros</BSButton> *@
			<button class="boton" @onclick="GetLibro">Traer Libros</button>
			@if(ListL!=null)
			{
			<BSTable Class="tablamorada">
					<BSTHead>
						<BSTR>
							<BSTD>LibroID</BSTD>
							<BSTD>Titulo</BSTD>
							<BSTD>Genero</BSTD>
							<BSTD>AutorID</BSTD>
							<BSTD>Estado</BSTD>
						</BSTR>
					</BSTHead>
					<BSTBody>
						@foreach(Libro item in ListL)
						{
							<BSTR>
								<BSTD>@item.LibroID</BSTD>
								<BSTD>@item.NombreLibro</BSTD>
								<BSTD>@item.Genero</BSTD>
								<BSTD>@item.IDAutor</BSTD>
								<BSTD>@item.Estado</BSTD>
							</BSTR>
						}
					</BSTBody>
				</BSTable>
			
			}
			else
			{
				<BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessageLibro</BSAlert>
			}
	</BSContainer>
	<hr />

	<BSContainer class="Container">
		<h2>Busqueda filtrada de Libros</h2>
		<p>
			Digite el Codigo del Libro:
			<input class="input" type="text" @bind="CodLibro" required />
		</p>
		@* <BSButton Color="BlazorStrap.BSColor.Dark" IsOutlined="true" @onclick="Gefiltrado">Traerlo</BSButton> *@
		<button class="boton" @onclick="Gefiltrado">Traerlos</button>
		@if(libro!=null)
		{
			<BSTable Class="tablamorada">
				<BSTHead>
					<BSTR>
						<BSTD>LibroID</BSTD>
						<BSTD>Titulo</BSTD>
						<BSTD>Genero</BSTD>
						<BSTD>AutorID</BSTD>
						<BSTD>Estado</BSTD>
					</BSTR>
				</BSTHead>
				<BSTBody>	
						<BSTR>
							<BSTD>@libro.LibroID</BSTD>
							<BSTD>@libro.NombreLibro</BSTD>
							<BSTD>@libro.Genero</BSTD>
							<BSTD>@libro.IDAutor</BSTD>
							<BSTD>@libro.Estado</BSTD>
						</BSTR>	
				</BSTBody>
			</BSTable>
			<BSAlert Color="BlazorStrap.BSColor.Success" HasIcon="true">Peticion Exitosa</BSAlert>
			
		}
		else
		{
			<BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessageGetID</BSAlert>
		}
	</BSContainer>

	<hr />

	<BSContainer class="Container">
		<h2>Eliminar Libros</h2>
		<p>
			Digite el codigo del Libro para eliminar:
			<input class="input" type="text" @bind="CodDelete" required />
		</p>
		@* <BSButton Color="BlazorStrap.BSColor.Dark" IsOutlined="true" @onclick="EliminarLibro">Eliminarlos</BSButton> *@
		<button class="boton" @onclick="EliminarLibro">Eliminarlo</button>
		@if(SuccessDelete!=false)
		{
			<BSAlert Color="BlazorStrap.BSColor.Success" HasIcon="true">Eliminacion Correcta</BSAlert>
		}
		else
		{
			<BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessageDelete</BSAlert>
		}
	</BSContainer>

	<hr />

	<BSContainer class="Container">
		<h2>Formulario para insertar Libros</h2>
		@* <BSButton Color="BlazorStrap.BSColor.Dark" IsOutlined="true" @onclick="ModalInsert">Activar formulario</BSButton> *@
		<button class="boton" @onclick="ModalInsert">Activar formulario</button>
		<BSModal @ref="Minsert">
			<BSModalHeader>
				<h2>Insertar Libros</h2>
			</BSModalHeader>
			<BSModalContent>
				<div class="form-group">
					<label for="NombreAutor">Titulo:</label>
					<input type="text" id="NombreLibro" class="form-control" @bind="LibroPost.NombreLibro" />
				</div>
				<div class="form-group">
					<label for="Nacionalidad">Genero:</label>
					<input type="text" id="Genero" class="form-control" @bind="LibroPost.Genero" />
				</div>
				<div class="form-group">
					<label for="FechaNacimiento">Codigo de Autor:</label>
					<input type="text" id="FechaNacimiento" class="form-control" @bind="LibroPost.IDAutor" />
				</div>
				<div class="form-group">
					<label for="FechaNacimiento">Estado:</label>
					<input type="text" id="FechaNacimiento" class="form-control" @bind="LibroPost.Estado" />
				</div>
				<BSButton Color="BlazorStrap.BSColor.Success" IsOutlined="true" @onclick="PostLibros">Insertar</BSButton>
				<BSButton Color="BlazorStrap.BSColor.Danger" IsOutlined="true" @onclick="CerrarModal">cerrar</BSButton>
				@if(SuccessPost!=false)
				{
					<BSAlert Color="BlazorStrap.BSColor.Success" HasIcon="true">Insercion Realizada</BSAlert>
				}
				else
				{
					<BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessagePost</BSAlert>
				}
			</BSModalContent>
		</BSModal>
	</BSContainer>

	<hr />

	<BSContainer class="Container">
		<h2>Modificar registro de Libros</h2>
		<p>
			Digite el codigo del Libro a modificar:
			<input class="input" type="text" @bind="CodPut" required />
		</p>
		<button class="boton" @onclick="GetPutLibros">Buscarlo</button>
		@if(LibroPut!=null)
		{
			<div class="Container2">
				<h2>Libro encontrado</h2>
				<p>
					Modifique el Nombre del Libro:
					<input class="input" type="text" @bind="LibroPut.NombreLibro" required />
				</p>
				<p>
					Modifique el Genero del Libro:
					<input class="input"  type="text" @bind="LibroPut.Genero" required />
				</p>
				<p>
					Modifique el codigo del autor del Libro:
					<input class="input" type="text" @bind="LibroPut.IDAutor" required />
				</p>
				<p>
					Modifique la disponibilidad del Libro:
					<input class="input" type="text" @bind="LibroPut.Estado" required />
				</p>
				<button class="boton" @onclick="PutLibro">Modificar</button>
				@if(SuccessPut!=null)
				{
					<BSAlert Color="BlazorStrap.BSColor.Success" HasIcon="true">Modificado correctamente</BSAlert>
				}
				else
				{
					<BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessagePut</BSAlert>
				}

			</div>
		}
		else
		{
			<BSAlert Color="BlazorStrap.BSColor.Danger" HasIcon="true">@MessageGetPut</BSAlert>
		}
	</BSContainer>

    
    </body>
    </html>

@code {

	//Metodo para traer todos los libros
	public List<Libro>? ListL { get; set; }
	public string? MessageLibro { get; set; }
	protected async Task GetLibro()
	{
		try
		{
			string url = "https://localhost:7016/api/Libroes";
			var response = await ServiciosLibro.GetLibro<List<Libro>>(url);
			if(!response.Error)
			{
				ListL = response.Response;
				MessageLibro = String.Empty;
			}
			else
			{
				ListL = null;
				MessageLibro = await response.GetErrorMessageAsync();
			}

		}catch(Exception e)
		{
			ListL = null;
			MessageLibro = e.Message;

		}

	}

	//Metodo para filtrar Libros
	public Libro? libro { get; set; }
	public int CodLibro { get; set; }
	public string? MessageGetID { get; set; }
	protected async Task Gefiltrado()
	{
		try
		{
			string url = "https://localhost:7016/api/Libroes/"+CodLibro;
			var response = await ServiciosLibro.GetLibro<Libro>(url);
			if(!response.Error)
			{
				libro = response.Response;
				MessageGetID = String.Empty;
			}
			else
			{
				libro = null;
				MessageGetID = await response.GetErrorMessageAsync();
			}

		}catch (Exception e)
		{
			libro = null;
			MessageGetID = e.Message;

		}

	}

	//Metodo para eliminar un libro
	public int CodDelete { get; set; }
	public bool SuccessDelete =false;
	public string? MessageDelete { get; set; }
	protected async Task EliminarLibro()
	{
		try
		{
			string url = "https://localhost:7016/api/Libroes/" + CodDelete;
			var response = await ServiciosLibro.DeleteLibro(url);
			if (!response.Error)
			{
				SuccessDelete = true;
				MessageDelete = String.Empty;
			}
			else
			{
				SuccessDelete = false;
				MessageDelete = await response.GetErrorMessageAsync();
			}
		}catch(Exception e)
		{
			SuccessDelete = false;
			MessageDelete = e.Message;
		}
	}

	//Metodod para agregar un libro
	public Libro LibroPost { get; set; } = new Libro();
	public bool SuccessPost=false;
	public string? MessagePost { get; set; }

	protected async Task PostLibros()
	{
		try
		{
			string url = "https://localhost:7016/api/Libroes";
			var response = await ServiciosLibro.PostLibro<Libro>(url, LibroPost);
			if (!response.Error)
			{
				SuccessPost = true;
				MessagePost = String.Empty;
			}
			else
			{
				SuccessPost = false;
				MessagePost = await response.GetErrorMessageAsync();
			}
		}
		catch (Exception e)
		{
			SuccessPost = false;
			MessagePost = e.Message;
		}
	}

	//Metodo para editar la informacion de un libro

	//Primero se busca un libro, si el libro esta, se ha de modificar la informacion que necesite el usuario
	public int CodPut { get; set; }
	public Libro? LibroPut { get; set; }
	public string? MessageGetPut { get; set; }
	protected async Task GetPutLibros()
	{
		try
		{
			string url = "https://localhost:7016/api/Libroes/" + CodPut;
			var response = await ServiciosLibro.GetLibro<Libro>(url);
			if (!response.Error)
			{
				LibroPut = response.Response;
				MessageGetPut = String.Empty;
			}
			else
			{
				LibroPut = null;
				MessageGetPut = await response.GetErrorMessageAsync();
			}
		}
		catch (Exception e)
		{
			LibroPut = null;
			MessageGetPut = e.Message;
		}

	}


	//Se modifica la informacion ya que se ha encontrado el libro
	public bool SuccessPut = false;
	public string? MessagePut { get; set; }
	protected async Task PutLibro()
	{
		try
		{
			string url = "https://localhost:7016/api/Libroes/" + CodPut;
			var response = await ServiciosLibro.PutLibro<Libro>(url, LibroPut);
			if (!response.Error)
			{
				SuccessPut = true;
				MessagePut = String.Empty;

			}
			else
			{
				SuccessPut = false;
				MessagePut = await response.GetErrorMessageAsync();
			}

		}
		catch (Exception e)
		{
			SuccessPut = false;
			MessagePut = e.Message;
		}
	}

	//Metodo para poder activar el modal
	public BSModal? Minsert { get; set; }
	public async Task ModalInsert()
	{
		if(Minsert!=null)
		{
			await Minsert.ToggleAsync();
		}

	}

	public async Task CerrarModal()
	{
		if(Minsert!=null)
		{
			await Minsert.ToggleAsync();
		}
	}

}
